version: 2.1
orbs:
  slack: circleci/slack@4.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      id:
        type: string
    steps:
      - run:
          name: Destroy udapeople backend cfn stack
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.id >>
      - run:
          name: Destroy udapeople frontend cfn stack and S3 Bucket
          when: on_fail
          command: |
            aws s3 rm s3://udapeople-<< parameters.id >> --recursive
            aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.id >>

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      id:
        type: string
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            cd ~/project/backend
            npm install
            npm run build
            npm run migrations:revert
  install_awscli:
    description: Install AWS CLI v2
    steps:
      - run:
          name: Install AWS CLI v2
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Run front-end test
          command: |
            cd frontend
            npm install
            npm run test
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run Backend test
          command: |
            cd backend
            npm install
            npm run test
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Scan-Fronted (Audit) Frontend
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical
  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Scan-backend (Audit) Backend
          command: |
            cd backend
            npm install
            npm audit fix --force
            # npm audit --audit-level=critical
  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: install tar and gzip
          command: yum install -y tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
                --template-file .circleci/files/backend.yml \
                --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
                --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
                --tags project=udapeople
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
                --template-file .circleci/files/frontend.yml \
                --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
                --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
                --tags project=udapeople
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            BACKEND_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:aws:cloudformation:stack-name,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)
            echo $BACKEND_IP >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt
      - persist_to_workspace:
          # root: .
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
            # - ./.circleci/ansible/inventory.txt
      - destroy-environment:
          id: ${CIRCLE_WORKFLOW_ID:0:7}

  configure-infrastructure:
    docker:
      - image: python:3.10.5-alpine3.16
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["e4:99:0a:b3:5b:37:2a:ef:56:7d:2f:a7:f6:90:ed:9f"]
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update --no-cache tar gzip ansible
            apk add --update openssh
            pip install --upgrade awscli
      - run:
          name: Configure server
          command: |
            # add environment variables to server ===>
            echo ENVIRONMENT=production > backend/.env
            echo TYPEORM_CONNECTION=$TYPEORM_CONNECTION >> backend/.env
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> backend/.env
            echo TYPEORM_ENTITIES=$TYPEORM_ENTITIES >> backend/.env
            echo TYPEORM_HOST=$TYPEORM_HOST >> backend/.env
            echo TYPEORM_MIGRATIONS=$TYPEORM_MIGRATIONS >> backend/.env
            echo TYPEORM_MIGRATIONS_DIR=$TYPEORM_MIGRATIONS_DIR >> backend/.env
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> backend/.env
            echo TYPEORM_PORT=$TYPEORM_PORT >> backend/.env
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> backend/.env
            cat backend/.env

            # add env var stop ====>

            cd .circleci/ansible
            cat inventory.txt
            echo "above should be an ip"
            ansible-playbook -i inventory.txt configure-server.yml

      - destroy-environment:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
      - persist_to_workspace:
          root: ~/
          paths:
            - project/backend
  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - install_awscli
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run run-migrations
          command: |
            cd backend
            npm install
            npm run migrations > migrations_dump.txt
      - run:
          name: Send migration results to memstash
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
              curl --header "content-length:0" -X POST https://keyvalue.immanuel.co/api/KeyVal/UpdateValue/3cg7aby9/migration_${CIRCLE_WORKFLOW_ID:0:7}/1
            else
              curl --header "content-length:0" -X POST https://keyvalue.immanuel.co/api/KeyVal/UpdateValue/3cg7aby9/migration_${CIRCLE_WORKFLOW_ID:0:7}/0
            fi
      - destroy-environment:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
          id: ${CIRCLE_WORKFLOW_ID:0:7}

  deploy-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - attach_workspace:
          # at: .
          at: ~/
      - run:
          name: Install dependencies
          # working_directory: /tmp
          command: |
            sudo apt-get update && sudo apt-get install -yy less
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip "awscliv2.zip"
            sudo ./aws/install
      - run:
          name: Get backend url
          working_directory: ./frontend
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
             --query 'Reservations[*].Instances[*].PublicIpAddress' \
             --filters Name=tag:aws:cloudformation:stack-name,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} \
             --output text)
             export API_URL="http://${BACKEND_IP}:3030"
             echo "API_URL = ${API_URL}"
             echo "API_URL=http://${BACKEND_IP}:3030" >> .env
             cat .env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            sudo npm install
            sudo npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp ./dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      - destroy-environment:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
  deploy-backend:
    docker:
      - image: python:3.10-alpine3.16
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["e4:99:0a:b3:5b:37:2a:ef:56:7d:2f:a7:f6:90:ed:9f"]
      - attach_workspace:
          at: ~/
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Install dependencies
          # no_output_timeout: "10m"
          command: |
            apk add --update --no-cache tar gzip nodejs npm aws-cli ansible
      - run:
          name: Deploy backend
          command: |
            export TYPEORM_MIGRATIONS_DIR=./src/migrations
            export TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts
            export TYPEORM_MIGRATIONS=./src/migrations/*.ts

            cd backend
            echo "@jobbird:registry=https://gitlab.ycdev.nl/api/v4/projects/1600/packages/npm/" >>.npmrc
            echo "//gitlab.ycdev.nl/api/v4/projects/1600/packages/npm/:_authToken=${JB_COMPONENT_LIB_AUTH_TOKEN}" >>.npmrc
            cat .npmrc
            npm install
            npm i "@jobbird/vue-component-library"
            npm run build
            cd ..
            echo "checking directory $(pwd)"
            pwd
            tar -C backend -czvf artifact.tar.gz .
            mkdir -p ~/project/.circleci/ansible/roles/deploy/files/
            mv artifact.tar.gz .circleci/ansible/roles/deploy/files/artifact.tar.gz
            cd .circleci/ansible
            echo "should be inside ansible $(pwd)"
            pwd
            echo "Contents of the inventory.txt file is ------$(cat inventory.txt)"
            ansible-playbook -i inventory.txt deploy-backend.yml

      - destroy-environment:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
  smoke-test:
    docker:
      - image: python:3.7-alpine3.16
    steps:
      - checkout
      # - install_awscli
      - run:
          name: Install dependencies
          # working_directory: /tmp
          command: |
            # sudo apt install ansible
            apk add --update --no-cache curl aws-cli nodejs npm
            pip install awscli
      - run:
          name: Backend smoke test.
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
             --query 'Reservations[*].Instances[*].PublicIpAddress' \
             --filters Name=tag:aws:cloudformation:stack-name,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} \
             --output text)

            export API_URL=http://${BACKEND_IP}:3030
            echo $API_URL
            if curl -s $API_URL/api/status | grep "ok"
            then
              # return 0
              exit 0
            else
              # return 1
              exit 1
            fi
      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-west-2.amazonaws.com/#/employees"
            echo $URL
            if curl -s ${URL} | grep "Welcome"
            then
              # Change this to 0 after the job fails
              # return 1
              exit 0
            else
              # return 1
              exit 1
            fi
      - destroy-environment:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
          id: ${CIRCLE_WORKFLOW_ID:0:7}

  cloudfront-update:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            sudo apt install -y tar gzip curl
      - install_awscli
      - run:
          name: Update cloudfront distribution
          command: |
            export OLD_WORKFLOW_ID=$(aws cloudformation list-exports \
            --query "Exports[?Name==\`WorkflowID\`].Value" \
            --no-paginate --output text)
            echo "Old Wokflow ID: $OLD_WORKFLOW_ID"
            curl https://keyvalue.immanuel.co/api/KeyVal/GetValue/3cg7aby9/migration_${OLD_WORKFLOW_ID}
      - run:
          name: Update cloudfront distribution
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/cloudfront.yml \
            --stack-name InitialStack \
            --parameter-overrides WorkflowID=${CIRCLE_WORKFLOW_ID:0:7} \
            --tags project=udapeople
      - destroy-environment:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
  cleanup:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Get old stack workflow id and remove stacks
          command: |
            export OLD_WORKFLOW_ID=$(aws cloudformation \
              list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
              --no-paginate --output text)
               echo OLD_WORKFLOW_ID: "${OLD_WORKFLOW_ID}"
      - run:
          name: Remove old stacks and filters
          command: |
            export OLD_WORKFLOW_ID=$(aws cloudformation \
              list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
              --no-paginate --output text)
               echo OLD_WORKFLOW_ID: "${OLD_WORKFLOW_ID}"

            echo CIRCLE_WORKFLOW_ID "${CIRCLE_WORKFLOW_ID:0:7}"

            # if [[ "${STACKS[@]}" =~ "${OLD_WORKFLOW_ID}" ]]
            if [[ "${CIRCLE_WORKFLOW_ID:0:7}" != "${OLD_WORKFLOW_ID}" ]]
            then
            # your code goes here
                aws s3 rm "s3://udapeople-${OLD_WORKFLOW_ID}" --recursive
                aws cloudformation delete-stack --stack-name "udapeople-backend-${OLD_WORKFLOW_ID}"
                aws cloudformation delete-stack --stack-name "udapeople-frontend-${OLD_WORKFLOW_ID}"
            else
              echo "theres nothing to delete"
            fi

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
          filters:
            branches:
              only: [master]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      # - cleanup:
      #     requires: [cloudfront-update]

